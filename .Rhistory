goal = read_csv('goal.csv')
View(goal)
right_columns = colnames(goal)
foods = foods[,right_columns]
View(foods)
View(foods)
View(goal)
View(goal)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R')
setdiff(right_columns, goal_columns)
setdiff( goal_columns, right_columns)
goal %<>% rename('fats' = 'fat')
goal %<>% rename('fat' = 'fats')
View(goal)
View(foods)
right_columns
sort(right_columns)
goal %<>% rename(
'fat' = 'fats',
'calories' = 'energy',
'proteins' = 'protein',
'carbohydrates' = 'carbohydrate',
'chromium' = 'chrome',
'omega3' = 'omega_3',
'selenium' = 'selen'
)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
goal = read_csv('goal.csv')
View(goal)
View(foods)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
mat = matrix(0, nrow = 4, ncol = length(right_columns))
rownames(mat) = c('day_bottom','day_top','week_bottom', 'week_top')
colnames(mat) = right_columns
View(mat)
mat = tibble(mat)
View(mat)
mat = matrix(1, nrow = 4, ncol = length(right_columns))
rownames(mat) = c('day_bottom','day_top','week_bottom', 'week_top')
colnames(mat) = right_columns
mat = tibble(mat)
mat = matrix(1, nrow = 4, ncol = length(right_columns))
rownames(mat) = c('day_bottom','day_top','week_bottom', 'week_top')
colnames(mat) = right_columns
mat = as.tibble(mat)
mat$energy = c(0.93, 1.07, 0.97, 1.03)
View(mat)
View(foods)
right_columns
sort(right_columns)
mat[,c('beta_carotene',
'vitamin_b1',
'vitamin_b2','vitamin_b5','vitamin_b6','vitamin_b9','vitamin_c',
'vitamin_e','vitamin_pp','vitamin_k','vitamin_h','chlorine','magnesium',
'sodium','phosphorus','iron','iodine','manganese',
'copper', 'molybdenum','cobalt',
'selen','serine', 'chrome','zinc')] = c(0.8, 3.5, 0.95, 3.5)
View(mat)
bad_cols = sapply(mat, function(cl) sum(cl == 1)==4)
View(mat)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/borders.R', encoding = 'UTF-8')
View(mat)
mat[,-bad_cols]
mat[,!bad_cols]
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/borders.R', encoding = 'UTF-8')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/borders.R', encoding = 'UTF-8')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/borders.R', encoding = 'UTF-8')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/borders.R', encoding = 'UTF-8')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/borders.R', encoding = 'UTF-8')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
borders = read_csv('borders.csv')
tmp = intersect(goal_columns, colnames(borders))
borders = borders[,tmp]
tmp = setdiff(goal_columns, tmp)
View(borders)
borders[,tmp] = c(1, 10, 1, 10)
sum(colnames(borders)!=goal_columns)
# сделать порядок в коридорах таким же, как у цели
borders = borders[, goal_columns]
View(borders)
View(goal)
borders * goal
as.matrix(borders) * as.matrix(goal)
as.numeric(borders) * as.numeric(goal)
as.numeric(goal)
as.numeric(borders)
as.matrix(borders)
as.matrix(borders) * as.numeric(goal)
View(borders)
as.matrix(borders) * t(as.numeric(goal))
t(as.numeric(goal))
as.matrix(borders)
borders * t(as.numeric(goal))
borders[1:4,] * t(as.numeric(goal))
borders[1:4,] * as.numeric(goal)
for(i in 1:4){
borders[i,] = borders[i,] * as.numeric(goal)
}
View(borders)
View(goal)
View(goal)
library(tidyverse)
library(magrittr)
# просто считываю данные и удаляю лишние столбцы
foods = read_csv('foods.csv')
recipes = read_csv('recipes.csv')
foods %<>% select_if(is.numeric) %>%
select(-category_id, -general, -id_1, -food_id, -id_2, -food_id_1, -id_3, food_id_2, -food_id_2)
recipes %<>% select_if(is.numeric) %>% select(-recipe_id)
# отбираю только общие столбцы
foods_cols = colnames(foods)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(recipes_cols, foods_cols)
setdiff(foods_cols, recipes_cols)
right_columns = intersect(foods_cols, recipes_cols)
foods = foods[,right_columns]
recipes = recipes[,right_columns]
goal = read_csv('goal.csv')
goal_columns = colnames(goal)
View(goal)
View(foods)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(foods)
library(tidyverse)
library(magrittr)
# просто считываю данные и удаляю лишние столбцы
foods = read_csv('foods.csv')
recipes = read_csv('recipes.csv')
foods %<>% select_if(is.numeric) %>%
select(-category_id, -general, -id_1, -food_id, -id_2, -food_id_1, -id_3, food_id_2, -food_id_2)
recipes %<>% select_if(is.numeric) %>% select(-recipe_id)
View(foods)
foods = read_csv('foods.csv')
View(foods)
library(tidyverse)
recipes = read_csv('recipes.csv')
View(recipes)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(recipes)
View(goal)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(borders)
library(tidyverse)
library(magrittr)
foods = read_csv('foods.csv')
foods_names = foods$name
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
View(recipes)
View(recipes)
foods %<>% select_if(is.numeric) %>%
select(-category_id, -general, -id_1, -food_id, -id_2, -food_id_1, -id_3, food_id_2, -food_id_2)
View(foods)
foods %<>% select_if(is.numeric) %>%
select(-category_id, -general, -id_1,
-food_id, -X1
-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
foods %<>% select_if(is.numeric) %>%
select(#-category_id, -general, -id_1,
-food_id, -X1
#-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
View(foods)
View(foods)
food[is.na(foods)] = 0
foods[is.na(foods)] = 0
View(foods)
View(recipes)
recipes %<>% select_if(is.numeric) %>% select(-recipe_id)
recipes = read_csv('recipes.csv')
View(recipes)
View(recipes)
recipes %<>% select_if(is.bool)
recipes %<>% select_if(is.logical)
View(foods)
recipes = read_csv('recipes.csv')
recipes %>% select_if(is.numeric)
r = colnames(recipes %>% select_if(is.numeric))
setdiff(colname(recipes), r)
setdiff(colnames(recipes), r)
View(recipes)
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, - coef_for_men, -coef_for_women)
foods_cols = colnames(foods)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(recipes_cols, foods_cols)
View(recipes)
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, -id, - coef_for_men, -coef_for_women)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(foods_cols, recipes_cols)
right_columns = union(foods_cols, recipes_cols)
foods[,setdiff(recipes_cols, foods_cols)] = 0
recipes[,setdiff(foods_cols, recipes_cols)] = 0
# чтоб совпал порядок
foods = foods[,right_columns]
recipes = recipes[,right_columns]
goal = read_csv('goal.csv')
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
goal %<>% select(-bromine, -carbohydrate) %>%  rename(
'fat' = 'fats',
'energy' = 'calories',
'protein' = 'proteins',
'carbohydrate' = 'carbohydrates',
'chrome' = 'chromium',
'omega_3' = 'omega3',
'selen' = 'selenium'
)
goal_columns = colnames(goal)
View(goal)
View(foods)
foods$bromine
goal = read_csv('goal.csv')
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
goal %<>% select(#-bromine,
-carbohydrate
) %>%  rename(
'fat' = 'fats',
'energy' = 'calories',
'protein' = 'proteins',
'carbohydrate' = 'carbohydrates',
'chrome' = 'chromium',
'omega_3' = 'omega3',
'selen' = 'selenium'
)
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
foods = foods[,goal_columns]
recipes = recipes[,goal_columns]
write_csv(foods %>% mutate(name = foods_names), 'currect_foods.csv')
write_csv(recipes %>% mutate(name = recipes_names), 'currect_recipes.csv')
borders = read_csv('borders.csv')
View(borders)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/borders.R', encoding = 'UTF-8')
borders = read_csv('borders.csv')
tmp = intersect(goal_columns, colnames(borders))
borders = borders[,tmp]
tmp = setdiff(goal_columns, tmp)
borders[,tmp] = c(1, 10, 1, 10)
# сделать порядок в коридорах таким же, как у цели
borders = borders[, goal_columns]
for(i in 1:4){
borders[i,] = borders[i,] * as.numeric(goal)
}
for(i in 1:ncol(borders)){
if(sum(borders[,i])==0){
borders[,i] = c(0,1000,0,1000)
}
}
write_csv(borders, 'currect_borders.csv')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(borders)
View(foods)
library(tidyverse)
library(magrittr)
foods = read_csv('foods.csv')
foods_names = foods$name
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
foods %<>% select_if(is.numeric) %>%
select(#-category_id, -general, -id_1,
-food_id, -X1
#-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
foods[is.na(foods)] = 0
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, -id, - coef_for_men, -coef_for_women)
foods_cols = colnames(foods)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(recipes_cols, foods_cols)
setdiff(foods_cols, recipes_cols)
right_columns = union(foods_cols, recipes_cols)
foods[,setdiff(recipes_cols, foods_cols)] = 0
recipes[,setdiff(foods_cols, recipes_cols)] = 0
# чтоб совпал порядок
foods = foods[,right_columns]
recipes = recipes[,right_columns]
goal = read_csv('goal.csv')
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
goal %<>% select(#-bromine,
-carbohydrate
) %>%  rename(
'fat' = 'fats',
'energy' = 'calories',
'protein' = 'proteins',
'carbohydrate' = 'carbohydrates',
'chrome' = 'chromium',
'omega_3' = 'omega3',
'selen' = 'selenium'
)
goal_columns = colnames(goal)
foods = foods[,goal_columns]
recipes = recipes[,goal_columns]
write_csv(foods %>% mutate(name = foods_names), 'currect_foods.csv')
write_csv(recipes %>% mutate(name = recipes_names), 'currect_recipes.csv')
borders = read_csv('borders.csv')
tmp = intersect(goal_columns, colnames(borders))
borders = borders[,tmp]
borders = read_csv('borders.csv')
View(borders)
tmp = intersect(goal_columns, colnames(borders))
borders = borders[,tmp]
goal_columns = tmp
foods = foods[,goal_columns]
recipes = recipes[,goal_columns]
write_csv(foods %>% mutate(name = foods_names), 'currect_foods.csv')
write_csv(recipes %>% mutate(name = recipes_names), 'currect_recipes.csv')
goal = goal[,goal_columns]
View(goal)
# сделать порядок в коридорах таким же, как у цели
borders = borders[, goal_columns]
for(i in 1:4){
borders[i,] = borders[i,] * as.numeric(goal)
}
write_csv(borders, 'currect_borders.csv')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(goal)
View(goal)
goal[, 16]
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
binom.test(x=39, n=215, p=.15)
binom.test(x=39, n=10, p=.15)
binom.test(x=39, n=10, p=.15)
binom.test(x=39, n=50)
binom.test(x=3, n=300)
binom.test(x=3, n=500)
binom.test(x=14, n=500)
library(tidyverse)
library(magrittr)
# просто считываю данные и удаляю лишние столбцы
foods = read_csv('foods.csv')
foods_names = foods$name
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
foods %<>% select_if(is.numeric) %>%
select(#-category_id, -general, -id_1,
-food_id, -X1
#-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
foods[is.na(foods)] = 0
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, -id, - coef_for_men, -coef_for_women)
# отбираю только общие столбцы
foods_cols = colnames(foods)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(recipes_cols, foods_cols)
setdiff(foods_cols, recipes_cols)
#right_columns = intersect(foods_cols, recipes_cols)
#foods = foods[,right_columns]
#recipes = recipes[,right_columns]
right_columns = union(foods_cols, recipes_cols)
foods[,setdiff(recipes_cols, foods_cols)] = 0
recipes[,setdiff(foods_cols, recipes_cols)] = 0
# чтоб совпал порядок
foods = foods[,right_columns]
recipes = recipes[,right_columns]
# goal tabs
goal = read_csv('goal.csv')
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
# надо убрать столбец, так как нет соответствия, и несколько переименовать (это нехорошо)
# а еще есть нулевой столбец carbohydrate и нормальный carbohydrates, который должен быть carbohydrate
goal %<>% select(#-bromine,
-carbohydrate
) %>%  rename(
'fat' = 'fats',
'energy' = 'calories',
'protein' = 'proteins',
'carbohydrate' = 'carbohydrates',
'chrome' = 'chromium',
'omega_3' = 'omega3',
'selen' = 'selenium'
)
goal_columns = colnames(goal)
foods = foods[,goal_columns]
recipes = recipes[,goal_columns]
write_csv(foods %>% mutate(name = foods_names), 'currect_foods.csv')
write_csv(recipes %>% mutate(name = recipes_names), 'currect_recipes.csv')
# connect goal with borders
# надо присоединить к цели коридоры
# если признак есть в коридоре, но не в цели, его отбрасываем
# если есть в цели, но не в коридоре, добавляем в коридор с границами 1-10
borders = read_csv('borders.csv')
tmp = intersect(goal_columns, colnames(borders))
borders = borders[,tmp]
View(foods)
View(foods)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
library(tidyverse)
library(magrittr)
# просто считываю данные и удаляю лишние столбцы
foods = read_csv('foods.csv')
foods_names = foods$name
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
foods %<>% select_if(is.numeric) %>%
select(#-category_id, -general, -id_1,
-food_id, -X1
#-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
foods[is.na(foods)] = 0
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, -id, - coef_for_men, -coef_for_women)
# отбираю только общие столбцы
foods_cols = colnames(foods)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(recipes_cols, foods_cols)
setdiff(foods_cols, recipes_cols)
#right_columns = intersect(foods_cols, recipes_cols)
#foods = foods[,right_columns]
#recipes = recipes[,right_columns]
right_columns = union(foods_cols, recipes_cols)
foods[,setdiff(recipes_cols, foods_cols)] = 0
recipes[,setdiff(foods_cols, recipes_cols)] = 0
# чтоб совпал порядок
foods = foods[,right_columns]
recipes = recipes[,right_columns]
goal = read_csv('goal.csv')
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
# надо убрать столбец, так как нет соответствия, и несколько переименовать (это нехорошо)
# а еще есть нулевой столбец carbohydrate и нормальный carbohydrates, который должен быть carbohydrate
goal %<>% select(#-bromine,
-carbohydrate
) %>%  rename(
'fat' = 'fats',
'energy' = 'calories',
'protein' = 'proteins',
'carbohydrate' = 'carbohydrates',
'chrome' = 'chromium',
'omega_3' = 'omega3',
'selen' = 'selenium'
)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
library(tidyverse)
library(magrittr)
# просто считываю данные и удаляю лишние столбцы
foods = read_csv('foods.csv')
foods_names = foods$name
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
foods %<>% select_if(is.numeric) %>%
select(#-category_id, -general, -id_1,
-food_id, -X1
#-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
foods[is.na(foods)] = 0
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, -id, - coef_for_men, -coef_for_women)
# отбираю только общие столбцы
foods_cols = colnames(foods)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(recipes_cols, foods_cols)
setdiff(foods_cols, recipes_cols)
#right_columns = intersect(foods_cols, recipes_cols)
#foods = foods[,right_columns]
#recipes = recipes[,right_columns]
right_columns = union(foods_cols, recipes_cols)
foods[,setdiff(recipes_cols, foods_cols)] = 0
recipes[,setdiff(foods_cols, recipes_cols)] = 0
# чтоб совпал порядок
foods = foods[,right_columns]
recipes = recipes[,right_columns]
# goal tabs
goal = read_csv('goal.csv')
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
# надо убрать столбец, так как нет соответствия, и несколько переименовать (это нехорошо)
# а еще есть нулевой столбец carbohydrate и нормальный carbohydrates, который должен быть carbohydrate
goal %<>% select(#-bromine,
-carbohydrate
) %>%  rename(
'fat' = 'fats',
'energy' = 'calories',
'protein' = 'proteins',
'carbohydrate' = 'carbohydrates',
'chrome' = 'chromium',
'omega_3' = 'omega3',
'selen' = 'selenium'
)
goal_columns = colnames(goal)
foods = foods[,goal_columns]
recipes = recipes[,goal_columns]
write_csv(foods %>% mutate(name = foods_names), 'currect_foods.csv')
write_csv(recipes %>% mutate(name = recipes_names), 'currect_recipes.csv')
borders = read_csv('borders.csv')
tmp = intersect(goal_columns, colnames(borders))
goal_columns
colnames(borders)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(foods)
View(foods)
foods_names
foods$name
foods = read_csv('foods.csv')
foods$name
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(goal)
View(borders)
View(borders)
