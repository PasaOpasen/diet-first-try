recipes %<>% select_if(is.numeric) %>% select(-recipe_id)
View(foods)
foods = read_csv('foods.csv')
View(foods)
library(tidyverse)
recipes = read_csv('recipes.csv')
View(recipes)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(recipes)
View(goal)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(borders)
library(tidyverse)
library(magrittr)
foods = read_csv('foods.csv')
foods_names = foods$name
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
View(recipes)
View(recipes)
foods %<>% select_if(is.numeric) %>%
select(-category_id, -general, -id_1, -food_id, -id_2, -food_id_1, -id_3, food_id_2, -food_id_2)
View(foods)
foods %<>% select_if(is.numeric) %>%
select(-category_id, -general, -id_1,
-food_id, -X1
-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
foods %<>% select_if(is.numeric) %>%
select(#-category_id, -general, -id_1,
-food_id, -X1
#-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
View(foods)
View(foods)
food[is.na(foods)] = 0
foods[is.na(foods)] = 0
View(foods)
View(recipes)
recipes %<>% select_if(is.numeric) %>% select(-recipe_id)
recipes = read_csv('recipes.csv')
View(recipes)
View(recipes)
recipes %<>% select_if(is.bool)
recipes %<>% select_if(is.logical)
View(foods)
recipes = read_csv('recipes.csv')
recipes %>% select_if(is.numeric)
r = colnames(recipes %>% select_if(is.numeric))
setdiff(colname(recipes), r)
setdiff(colnames(recipes), r)
View(recipes)
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, - coef_for_men, -coef_for_women)
foods_cols = colnames(foods)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(recipes_cols, foods_cols)
View(recipes)
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, -id, - coef_for_men, -coef_for_women)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(foods_cols, recipes_cols)
right_columns = union(foods_cols, recipes_cols)
foods[,setdiff(recipes_cols, foods_cols)] = 0
recipes[,setdiff(foods_cols, recipes_cols)] = 0
# чтоб совпал порядок
foods = foods[,right_columns]
recipes = recipes[,right_columns]
goal = read_csv('goal.csv')
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
goal %<>% select(-bromine, -carbohydrate) %>%  rename(
'fat' = 'fats',
'energy' = 'calories',
'protein' = 'proteins',
'carbohydrate' = 'carbohydrates',
'chrome' = 'chromium',
'omega_3' = 'omega3',
'selen' = 'selenium'
)
goal_columns = colnames(goal)
View(goal)
View(foods)
foods$bromine
goal = read_csv('goal.csv')
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
goal %<>% select(#-bromine,
-carbohydrate
) %>%  rename(
'fat' = 'fats',
'energy' = 'calories',
'protein' = 'proteins',
'carbohydrate' = 'carbohydrates',
'chrome' = 'chromium',
'omega_3' = 'omega3',
'selen' = 'selenium'
)
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
foods = foods[,goal_columns]
recipes = recipes[,goal_columns]
write_csv(foods %>% mutate(name = foods_names), 'currect_foods.csv')
write_csv(recipes %>% mutate(name = recipes_names), 'currect_recipes.csv')
borders = read_csv('borders.csv')
View(borders)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/borders.R', encoding = 'UTF-8')
borders = read_csv('borders.csv')
tmp = intersect(goal_columns, colnames(borders))
borders = borders[,tmp]
tmp = setdiff(goal_columns, tmp)
borders[,tmp] = c(1, 10, 1, 10)
# сделать порядок в коридорах таким же, как у цели
borders = borders[, goal_columns]
for(i in 1:4){
borders[i,] = borders[i,] * as.numeric(goal)
}
for(i in 1:ncol(borders)){
if(sum(borders[,i])==0){
borders[,i] = c(0,1000,0,1000)
}
}
write_csv(borders, 'currect_borders.csv')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(borders)
View(foods)
library(tidyverse)
library(magrittr)
foods = read_csv('foods.csv')
foods_names = foods$name
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
foods %<>% select_if(is.numeric) %>%
select(#-category_id, -general, -id_1,
-food_id, -X1
#-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
foods[is.na(foods)] = 0
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, -id, - coef_for_men, -coef_for_women)
foods_cols = colnames(foods)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(recipes_cols, foods_cols)
setdiff(foods_cols, recipes_cols)
right_columns = union(foods_cols, recipes_cols)
foods[,setdiff(recipes_cols, foods_cols)] = 0
recipes[,setdiff(foods_cols, recipes_cols)] = 0
# чтоб совпал порядок
foods = foods[,right_columns]
recipes = recipes[,right_columns]
goal = read_csv('goal.csv')
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
goal %<>% select(#-bromine,
-carbohydrate
) %>%  rename(
'fat' = 'fats',
'energy' = 'calories',
'protein' = 'proteins',
'carbohydrate' = 'carbohydrates',
'chrome' = 'chromium',
'omega_3' = 'omega3',
'selen' = 'selenium'
)
goal_columns = colnames(goal)
foods = foods[,goal_columns]
recipes = recipes[,goal_columns]
write_csv(foods %>% mutate(name = foods_names), 'currect_foods.csv')
write_csv(recipes %>% mutate(name = recipes_names), 'currect_recipes.csv')
borders = read_csv('borders.csv')
tmp = intersect(goal_columns, colnames(borders))
borders = borders[,tmp]
borders = read_csv('borders.csv')
View(borders)
tmp = intersect(goal_columns, colnames(borders))
borders = borders[,tmp]
goal_columns = tmp
foods = foods[,goal_columns]
recipes = recipes[,goal_columns]
write_csv(foods %>% mutate(name = foods_names), 'currect_foods.csv')
write_csv(recipes %>% mutate(name = recipes_names), 'currect_recipes.csv')
goal = goal[,goal_columns]
View(goal)
# сделать порядок в коридорах таким же, как у цели
borders = borders[, goal_columns]
for(i in 1:4){
borders[i,] = borders[i,] * as.numeric(goal)
}
write_csv(borders, 'currect_borders.csv')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(goal)
View(goal)
goal[, 16]
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
binom.test(x=39, n=215, p=.15)
binom.test(x=39, n=10, p=.15)
binom.test(x=39, n=10, p=.15)
binom.test(x=39, n=50)
binom.test(x=3, n=300)
binom.test(x=3, n=500)
binom.test(x=14, n=500)
library(tidyverse)
library(magrittr)
# просто считываю данные и удаляю лишние столбцы
foods = read_csv('foods.csv')
foods_names = foods$name
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
foods %<>% select_if(is.numeric) %>%
select(#-category_id, -general, -id_1,
-food_id, -X1
#-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
foods[is.na(foods)] = 0
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, -id, - coef_for_men, -coef_for_women)
# отбираю только общие столбцы
foods_cols = colnames(foods)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(recipes_cols, foods_cols)
setdiff(foods_cols, recipes_cols)
#right_columns = intersect(foods_cols, recipes_cols)
#foods = foods[,right_columns]
#recipes = recipes[,right_columns]
right_columns = union(foods_cols, recipes_cols)
foods[,setdiff(recipes_cols, foods_cols)] = 0
recipes[,setdiff(foods_cols, recipes_cols)] = 0
# чтоб совпал порядок
foods = foods[,right_columns]
recipes = recipes[,right_columns]
# goal tabs
goal = read_csv('goal.csv')
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
# надо убрать столбец, так как нет соответствия, и несколько переименовать (это нехорошо)
# а еще есть нулевой столбец carbohydrate и нормальный carbohydrates, который должен быть carbohydrate
goal %<>% select(#-bromine,
-carbohydrate
) %>%  rename(
'fat' = 'fats',
'energy' = 'calories',
'protein' = 'proteins',
'carbohydrate' = 'carbohydrates',
'chrome' = 'chromium',
'omega_3' = 'omega3',
'selen' = 'selenium'
)
goal_columns = colnames(goal)
foods = foods[,goal_columns]
recipes = recipes[,goal_columns]
write_csv(foods %>% mutate(name = foods_names), 'currect_foods.csv')
write_csv(recipes %>% mutate(name = recipes_names), 'currect_recipes.csv')
# connect goal with borders
# надо присоединить к цели коридоры
# если признак есть в коридоре, но не в цели, его отбрасываем
# если есть в цели, но не в коридоре, добавляем в коридор с границами 1-10
borders = read_csv('borders.csv')
tmp = intersect(goal_columns, colnames(borders))
borders = borders[,tmp]
View(foods)
View(foods)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
library(tidyverse)
library(magrittr)
# просто считываю данные и удаляю лишние столбцы
foods = read_csv('foods.csv')
foods_names = foods$name
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
foods %<>% select_if(is.numeric) %>%
select(#-category_id, -general, -id_1,
-food_id, -X1
#-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
foods[is.na(foods)] = 0
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, -id, - coef_for_men, -coef_for_women)
# отбираю только общие столбцы
foods_cols = colnames(foods)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(recipes_cols, foods_cols)
setdiff(foods_cols, recipes_cols)
#right_columns = intersect(foods_cols, recipes_cols)
#foods = foods[,right_columns]
#recipes = recipes[,right_columns]
right_columns = union(foods_cols, recipes_cols)
foods[,setdiff(recipes_cols, foods_cols)] = 0
recipes[,setdiff(foods_cols, recipes_cols)] = 0
# чтоб совпал порядок
foods = foods[,right_columns]
recipes = recipes[,right_columns]
goal = read_csv('goal.csv')
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
# надо убрать столбец, так как нет соответствия, и несколько переименовать (это нехорошо)
# а еще есть нулевой столбец carbohydrate и нормальный carbohydrates, который должен быть carbohydrate
goal %<>% select(#-bromine,
-carbohydrate
) %>%  rename(
'fat' = 'fats',
'energy' = 'calories',
'protein' = 'proteins',
'carbohydrate' = 'carbohydrates',
'chrome' = 'chromium',
'omega_3' = 'omega3',
'selen' = 'selenium'
)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
library(tidyverse)
library(magrittr)
# просто считываю данные и удаляю лишние столбцы
foods = read_csv('foods.csv')
foods_names = foods$name
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
foods %<>% select_if(is.numeric) %>%
select(#-category_id, -general, -id_1,
-food_id, -X1
#-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
foods[is.na(foods)] = 0
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, -id, - coef_for_men, -coef_for_women)
# отбираю только общие столбцы
foods_cols = colnames(foods)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(recipes_cols, foods_cols)
setdiff(foods_cols, recipes_cols)
#right_columns = intersect(foods_cols, recipes_cols)
#foods = foods[,right_columns]
#recipes = recipes[,right_columns]
right_columns = union(foods_cols, recipes_cols)
foods[,setdiff(recipes_cols, foods_cols)] = 0
recipes[,setdiff(foods_cols, recipes_cols)] = 0
# чтоб совпал порядок
foods = foods[,right_columns]
recipes = recipes[,right_columns]
# goal tabs
goal = read_csv('goal.csv')
goal_columns = colnames(goal)
setdiff(goal_columns, right_columns)
# надо убрать столбец, так как нет соответствия, и несколько переименовать (это нехорошо)
# а еще есть нулевой столбец carbohydrate и нормальный carbohydrates, который должен быть carbohydrate
goal %<>% select(#-bromine,
-carbohydrate
) %>%  rename(
'fat' = 'fats',
'energy' = 'calories',
'protein' = 'proteins',
'carbohydrate' = 'carbohydrates',
'chrome' = 'chromium',
'omega_3' = 'omega3',
'selen' = 'selenium'
)
goal_columns = colnames(goal)
foods = foods[,goal_columns]
recipes = recipes[,goal_columns]
write_csv(foods %>% mutate(name = foods_names), 'currect_foods.csv')
write_csv(recipes %>% mutate(name = recipes_names), 'currect_recipes.csv')
borders = read_csv('borders.csv')
tmp = intersect(goal_columns, colnames(borders))
goal_columns
colnames(borders)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(foods)
View(foods)
foods_names
foods$name
foods = read_csv('foods.csv')
foods$name
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(goal)
View(borders)
View(borders)
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
View(goal)
View(recipes)
summary(recipes$manganese)
summary(recipes$cobalt)
summary(recipes$omega_3)
summary(foods$omega_3)
View(foods)
summary(foods$manganese)
summary(foods$cobalt)
library(tidyverse)
library(magrittr)
# просто считываю данные и удаляю лишние столбцы
foods = read_csv('foods.csv')
View(foods)
library(tidyverse)
VIEW = function(name){
data = read_csv(paste0('database/',name,'.csv'))
View(data)
}
VIEW('alias_units')
VIEW('categories_limit')
VIEW('category')
VIEW('cook_type_recipes')
VIEW('cooking')
VIEW('diet_restrictions')
VIEW('diet_restrictions_tags')
VIEW('diet_types')
VIEW('diet_types_tags')
VIEW('diseases')
VIEW('dish')
VIEW('enabled_categories')
VIEW('enabled_products')
VIEW('food_limit')
VIEW('food_tag')
VIEW('medicaments')
VIEW('migrations')
VIEW('minerals')
VIEW('nutrient_group')
VIEW('nutrients')
VIEW('NutrientType')
VIEW('patient')
VIEW('recipes')
VIEW('recipes_composition')
VIEW('recipes')
VIEW('dish')
VIEW('food_tag')
VIEW('category')
VIEW('dish')
VIEW('dish')
VIEW('NutrientType')
VIEW('nutrients')
VIEW('minerals')
VIEW('nutrient_group')
VIEW('minerals')
VIEW('recipes_composition')
VIEW('food_limit')
VIEW('food_tag')
VIEW('category')
VIEW('dish')
VIEW('category')
VIEW('recipes')
VIEW('nutrients')
VIEW('minerals')
VIEW('food_tag')
VIEW('food_tag')
VIEW('category')
VIEW('enabled_categories')
VIEW('recipes')
VIEW('recipes_composition')
VIEW('alias_units')
VIEW('users')
VIEW('units')
VIEW('tags')
VIEW('recipes_product')
VIEW('recipe_tag')
VIEW('food_tags')
VIEW('food_tag')
VIEW('tags')
VIEW('category')
VIEW('tags')
VIEW('category')
VIEW('tags')
VIEW('food_tag')
VIEW('category')
VIEW('recipe_tag')
library(tidyverse)
library(magrittr)
# просто считываю данные и удаляю лишние столбцы
foods = read_csv('foods.csv')
foods_names = foods$name
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
foods %<>% select_if(is.numeric) %>%
select(#-category_id, -general, -id_1,
-food_id, -X1
#-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
foods[is.na(foods)] = 0
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, -id, - coef_for_men, -coef_for_women)
View(foods)
colnames(foods)
library(tidyverse)
library(magrittr)
# просто считываю данные и удаляю лишние столбцы
foods = read_csv('foods.csv')
foods_names = foods$name
recipes = read_csv('recipes.csv')
recipes_names = as.character(recipes$id)
foods %<>% select_if(is.numeric) %>%
select(#-category_id, -general, -id_1,
-food_id, -X1
#-id_2, -food_id_1, -id_3, food_id_2, -food_id_2
)
foods[is.na(foods)] = 0
recipes %<>% select_if(is.numeric) %>% select(-recipe_id, -id, - coef_for_men, -coef_for_women)
# отбираю только общие столбцы
foods_cols = colnames(foods)
recipes_cols = colnames(recipes)
intersect(foods_cols, recipes_cols)
setdiff(recipes_cols, foods_cols)
setdiff(foods_cols, recipes_cols)
#right_columns = intersect(foods_cols, recipes_cols)
#foods = foods[,right_columns]
#recipes = recipes[,right_columns]
right_columns = union(foods_cols, recipes_cols)
foods[,setdiff(recipes_cols, foods_cols)] = 0
recipes[,setdiff(foods_cols, recipes_cols)] = 0
# чтоб совпал порядок
foods = foods[,right_columns]
recipes = recipes[,right_columns]
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/borders.R', encoding = 'UTF-8')
source('C:/Users/qtckp/OneDrive/Рабочий стол/diet_first_try/read_data.R', encoding = 'UTF-8')
borders = read_csv('borders.csv')
View(borders)
